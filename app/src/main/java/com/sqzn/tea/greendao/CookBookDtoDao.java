package com.sqzn.tea.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sqzn.tea.Beans.FoodMaterielConvert;
import com.sqzn.tea.Beans.StepConvert;
import java.util.List;

import com.sqzn.tea.Beans.CookBookDto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COOK_BOOK_DTO".
*/
public class CookBookDtoDao extends AbstractDao<CookBookDto, Void> {

    public static final String TABLENAME = "COOK_BOOK_DTO";

    /**
     * Properties of entity CookBookDto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property PictureImgUrl = new Property(1, String.class, "pictureImgUrl", false, "PICTURE_IMG_URL");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Author = new Property(3, String.class, "author", false, "AUTHOR");
        public final static Property Introduction = new Property(4, String.class, "introduction", false, "INTRODUCTION");
        public final static Property FoodMaterielList = new Property(5, String.class, "foodMaterielList", false, "FOOD_MATERIEL_LIST");
        public final static Property Steps = new Property(6, String.class, "steps", false, "STEPS");
    }

    private final FoodMaterielConvert foodMaterielListConverter = new FoodMaterielConvert();
    private final StepConvert stepsConverter = new StepConvert();

    public CookBookDtoDao(DaoConfig config) {
        super(config);
    }
    
    public CookBookDtoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COOK_BOOK_DTO\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"PICTURE_IMG_URL\" TEXT," + // 1: pictureImgUrl
                "\"NAME\" TEXT," + // 2: name
                "\"AUTHOR\" TEXT," + // 3: author
                "\"INTRODUCTION\" TEXT," + // 4: introduction
                "\"FOOD_MATERIEL_LIST\" TEXT," + // 5: foodMaterielList
                "\"STEPS\" TEXT);"); // 6: steps
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COOK_BOOK_DTO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CookBookDto entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String pictureImgUrl = entity.getPictureImgUrl();
        if (pictureImgUrl != null) {
            stmt.bindString(2, pictureImgUrl);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(5, introduction);
        }
 
        List foodMaterielList = entity.getFoodMaterielList();
        if (foodMaterielList != null) {
            stmt.bindString(6, foodMaterielListConverter.convertToDatabaseValue(foodMaterielList));
        }
 
        List steps = entity.getSteps();
        if (steps != null) {
            stmt.bindString(7, stepsConverter.convertToDatabaseValue(steps));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CookBookDto entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String pictureImgUrl = entity.getPictureImgUrl();
        if (pictureImgUrl != null) {
            stmt.bindString(2, pictureImgUrl);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(5, introduction);
        }
 
        List foodMaterielList = entity.getFoodMaterielList();
        if (foodMaterielList != null) {
            stmt.bindString(6, foodMaterielListConverter.convertToDatabaseValue(foodMaterielList));
        }
 
        List steps = entity.getSteps();
        if (steps != null) {
            stmt.bindString(7, stepsConverter.convertToDatabaseValue(steps));
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CookBookDto readEntity(Cursor cursor, int offset) {
        CookBookDto entity = new CookBookDto( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pictureImgUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // author
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // introduction
            cursor.isNull(offset + 5) ? null : foodMaterielListConverter.convertToEntityProperty(cursor.getString(offset + 5)), // foodMaterielList
            cursor.isNull(offset + 6) ? null : stepsConverter.convertToEntityProperty(cursor.getString(offset + 6)) // steps
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CookBookDto entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPictureImgUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIntroduction(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFoodMaterielList(cursor.isNull(offset + 5) ? null : foodMaterielListConverter.convertToEntityProperty(cursor.getString(offset + 5)));
        entity.setSteps(cursor.isNull(offset + 6) ? null : stepsConverter.convertToEntityProperty(cursor.getString(offset + 6)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CookBookDto entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CookBookDto entity) {
        return null;
    }

    @Override
    public boolean hasKey(CookBookDto entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
